# MIT License
#
# Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES, University of Washington. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

training_model_parameters:
  robot_dof: 7  # robot's degrees of freedom
  point_match_loss_weight: 1.0  # point match loss (BC loss) weight for actor
  collision_loss_weight: 5.0    # collision loss weight (only for validation in CoL)
  collision_loss_margin: 0.03   # margin for collision loss [m]
  actor_loss_weight: 1.0        # RL actor loss weight
  min_lr: 1.0e-5
  max_lr: 5.0e-5
  warmup_steps: 5000       # number of steps to warm up the learning rate linearly from min_lr to max_lr
  weight_decay: 1.0e-4     # weight decay for AdamW optimizers
  gamma: 0.99              # discount factor for Q-learning
  exploration_noise: 0.1   # exploration noise for actor [std deviation]
  target_actor_noise: 0.2  # target actor noise for actor [std deviation] [TD3]
  target_actor_noise_clip: 0.5 # target actor noise clip for actor [TD3]
  action_clip: None         # clip the actor actions to be within [-action_clip, action_clip], can be "None"
  use_huber_loss: true     # use Huber loss for critic loss instead of MSE loss
  tau: 0.005               # target network's soft update rate
  grad_clip_norm: 1.0      # gradient clipping norm
  rollout_length: 69       # number of steps to rollout for the actor
  pc_bounds: [[-1.5, -1.5, -0.1], [1.5, 1.5, 1.5]]  # bounds for the point clouds
  
data_module_parameters:
  data_dir: /workspace/datasets/ae_aristotle1_5mm_cubbies
  train_trajectory_key: "global_solutions"
  val_trajectory_key: "global_solutions"
  num_obstacle_points: 4096
  random_scale: 0.015 # std deviation of the noise added to the expert configurations
  num_target_points: 128
  include_reward: true

shared_parameters:
  urdf_path: /workspace/assets/panda/panda_spheres.urdf
  num_robot_points: 2048
  # urdf_path: /workspace/assets/gp7/gp7_spheres.urdf
  goal_reward: 1.0        # reward for reaching the goal
  collision_reward: -0.1  # reward for colliding with an obstacle
  step_reward: -0.01      # reward for each step that doesn't terminate the episode
  reward_scale: 1.0       # proportional scaling that applies to all rewards

num_workers: 6                       # number of CPU workers for the data loaders
checkpoint_interval: 30              # how often to save model checkpoints [minutes]
pretraining_steps: 51             # how many steps to pretrain for before starting to sample from actor's replay buffer [global steps]
start_using_actor_loss: 1000         # number of steps to wait before actor loss activates
validate_every_n_steps: 10000         # how often to run mid-epoch validation epochs [global steps]
collect_rollouts_every_n_steps: 50 # how often to collect actor rollouts for the replay buffer [global steps]
log_every_n_steps: 50               # how often to log metrics to wandb [global steps]
replay_buffer_capacity: 100000      # capacity of the replay buffer [number of transitions]
n_gpus: 1                            # number of GPUs to use for training
train_batch_size: 12                 # batch size for training
val_batch_size: 12                   # batch size for validation
mid_epoch_max_val_batches: 100       # maximum number of batches to validate on during mid-epoch validation
mid_epoch_max_val_rollouts: 20       # maximum number of rollouts to validate on during mid-epoch validation
end_epoch_max_val_batches: 200       # maximum number of batches to validate on at end-of-epoch validation
end_epoch_max_val_rollouts: 40       # maximum number of rollouts to validate on at end-of-epoch validation
expert_fraction: 0.25                # fraction of samples to sample from expert loader during fine-tuning
actor_delay: 1                       # delay for actor network's and target network's updates [TD3]
max_epochs: 100                      # maximum number of epochs to train for
mintest: false                       # true: run minimal test run for debugging
logging: true                        # true: log to wandb
save_checkpoint_dir: /workspace/checkpoints
load_checkpoint_path: /workspace/checkpoints/mpiformer_cubby.ckpt
experiment_name: "Cretin: Avoid Everything Except Exploration"
description: "Old AE point match loss, with unnorm configs"